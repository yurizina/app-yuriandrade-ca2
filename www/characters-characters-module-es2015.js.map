{"version":3,"sources":["./src/app/pages/characters/characters.page.html","./src/app/pages/characters/characters-routing.module.ts","./src/app/pages/characters/characters.module.ts","./src/app/pages/characters/characters.page.scss","./src/app/pages/characters/characters.page.ts"],"names":[],"mappings":"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","file":"characters-characters-module-es2015.js","sourcesContent":["export default \"<!-- We can settle all primary code in html, but these buttons will not work-->\\n<!-- We need to go to characters.page.ts to implement the logic behind this code-->\\n<ion-header>\\n\\t<ion-toolbar color=\\\"primary\\\">\\n\\t\\t<ion-title class=\\\"ion-text-center\\\">Characters</ion-title>\\n\\t</ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n\\t<ion-list>\\n\\t\\t<ion-item button detail lines=\\\"inset\\\" *ngFor=\\\"let character of chars\\\" (click)=\\\"openDetails(character)\\\">\\n\\t\\t\\t<!-- ngFor responsible for create multiple elements same type in array -->\\n\\t\\t\\t<!-- REMOVED -- async - we removed this because we are not using observe anymore-->\\n\\t\\t\\t<!-- ? - if varibable null dont crash -->\\n\\t\\t\\t<ion-avatar slot=\\\"start\\\">\\n\\t\\t\\t\\t<img src=\\\"{{ character.img }}\\\">\\n            </ion-avatar>\\n\\t\\t\\t\\t<!-- The tag avatar will display the image in a rounded icon-->\\n\\t\\t\\t\\t<ion-label>\\n\\t\\t\\t\\t\\t<p> {{ character.name }} </p>\\n\\t\\t\\t\\t</ion-label>\\n\\n\\t\\t</ion-item>\\n\\t</ion-list>\\n\\n<!-- To apply the infinite scroll, we have to define few things-->\\n<!-- threshold - when the scroll will apply the loadMore, in my case, when is close to the end of the list 5% -->\\n<!-- loadMore is a method in the characters.page.ts to load more content while using scroll down -->\\n\\t<ion-infinite-scroll threshold=\\\"5%\\\" (ionInfinite)=\\\"loadMore($event)\\\">\\n\\t\\t<ion-infinite-scroll-content loadingSpinner=\\\"bubbles\\\" loadingText=\\\"Loading more characters\\\">\\n\\t\\t</ion-infinite-scroll-content>\\n\\t</ion-infinite-scroll>\\n\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CharactersPage } from './characters.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CharactersPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CharactersPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CharactersPageRoutingModule } from './characters-routing.module';\n\nimport { CharactersPage } from './characters.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CharactersPageRoutingModule\n  ],\n  declarations: [CharactersPage]\n})\nexport class CharactersPageModule {}\n\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2NoYXJhY3RlcnMvY2hhcmFjdGVycy5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n//We set the root direct using Router functionality\nimport { Observable } from 'rxjs';\n//The observable will be able to receive multiple return values from HTTP requests \nimport { ApiService } from '../../services/api.service';\n//import this will allow to make request to API from page Services\n\n@Component({\n    selector: 'app-characters',\n    templateUrl: './characters.page.html',\n    styleUrls: ['./characters.page.scss'],\n})\nexport class CharactersPage implements OnInit {\n    chars = [];\n    //Array of characters, will allow to create several pages to infinite scroll \n    offset = 0;\n    //Define the very first page of the pack of pages\n    maxChars = 64;\n    //Number maximum of characters + 1, defining the end of infinite scroll \n\n    constructor(private router: Router, private api: ApiService) { }\n    //What is a contructor? We use the constructor to storage services and classes \n    //We first used the Http request, but we defined a new pack of pages Services to host the url \n    //Once we define functions to call the right url request, we use the funtion here as ApiService \n\n    ngOnInit() {\n\n        this.loadCharacters();\n    }\n\n    loadCharacters(event?) {\n\n        //Now we will make connection when the method is called in the view!\n        //Will be able to get data from API with function getCharacters and show the first 20 characters defined in the url as limit\n        this.api.getCharacters(this.offset).subscribe(data => {\n\n            //this console shows the information in the console of the browser\n            //easy the track of data retrieved from API\n            console.log(\"my chararters info:\", data);\n\n            //we need to concacnate the information retrieved in many arrays\n            //Once the array created we can load a new page with the following array\n            this.chars = this.chars.concat(data);\n\n            //We will finish every the event of loading a page\n            //This allow to load the next page until it reaches the number max of pages\n            if (event) {\n                event.target.complete();\n            }\n        })\n    }\n\n    loadMore(event?) {\n        //We have to create a function to load more pages\n        //console.log(event);\n        //This offset++ will increase the number of pages every we need the function\n        this.offset = this.offset + 20;\n        //What to do with the loadMore function? Call the main function which have the data\n        this.loadCharacters(event);\n\n        //Once the number of pages have reached, the loadMore function stops\n        if (this.offset > this.maxChars) {\n            event.target.disabled = true;\n        }\n    }\n\n\n    openDetails(character) {\n\n        //these function was created in characters.page.html \n        //this will set the logic to call the function with correct router\n\n        //We create a variable to transform request data from API to our code here:\n        let charId = character.char_id;\n\n        this.router.navigateByUrl(`/tabs/characters/${charId}`);\n        //We could have one line of code like this one: \n        //this.router.navigateByUrl('/tabs/characters/${character.char_id}'); \n    }\n\n}\n"],"sourceRoot":"webpack:///"}